defmodule StellarBase.XDR.SCPQuorumSet do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `SCPQuorumSet` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    Uint32,
    NodeIDList,
    SCPQuorumSetList
  }

  @struct_spec XDR.Struct.new(
    threshold: Uint32,
    validators: NodeIDList,
    inner_sets: SCPQuorumSetList
  )

  @type type_threshold :: Uint32.t()
  @type type_validators :: NodeIDList.t()
  @type type_inner_sets :: SCPQuorumSetList.t()

  @type t :: %__MODULE__{threshold: type_threshold(), validators: type_validators(), inner_sets: type_inner_sets()}

  defstruct [:threshold, :validators, :inner_sets]

  @spec new(threshold :: type_threshold(), validators :: type_validators(), inner_sets :: type_inner_sets()) :: t()
  def new(
    %Uint32{} = threshold,
    %NodeIDList{} = validators,
    %SCPQuorumSetList{} = inner_sets
  ),
  do: %__MODULE__{threshold: threshold, validators: validators, inner_sets: inner_sets}

  @impl true
  def encode_xdr(%__MODULE__{threshold: threshold, validators: validators, inner_sets: inner_sets}) do
    [threshold: threshold, validators: validators, inner_sets: inner_sets]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{threshold: threshold, validators: validators, inner_sets: inner_sets}) do
    [threshold: threshold, validators: validators, inner_sets: inner_sets]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [threshold: threshold, validators: validators, inner_sets: inner_sets]}, rest}} ->
        {:ok, {new(threshold, validators, inner_sets), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [threshold: threshold, validators: validators, inner_sets: inner_sets]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(threshold, validators, inner_sets), rest}
  end
end
