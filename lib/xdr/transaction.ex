defmodule StellarBase.XDR.Transaction do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `Transaction` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    MuxedAccount,
    Uint32,
    SequenceNumber,
    Preconditions,
    Memo,
    OperationList100,
    TransactionExt
  }

  @struct_spec XDR.Struct.new(
    source_account: MuxedAccount,
    fee: Uint32,
    seq_num: SequenceNumber,
    cond: Preconditions,
    memo: Memo,
    operations: OperationList100,
    ext: TransactionExt
  )

  @type type_source_account :: MuxedAccount.t()
  @type type_fee :: Uint32.t()
  @type type_seq_num :: SequenceNumber.t()
  @type type_cond :: Preconditions.t()
  @type type_memo :: Memo.t()
  @type type_operations :: OperationList100.t()
  @type type_ext :: TransactionExt.t()

  @type t :: %__MODULE__{source_account: type_source_account(), fee: type_fee(), seq_num: type_seq_num(), cond: type_cond(), memo: type_memo(), operations: type_operations(), ext: type_ext()}

  defstruct [:source_account, :fee, :seq_num, :cond, :memo, :operations, :ext]

  @spec new(source_account :: type_source_account(), fee :: type_fee(), seq_num :: type_seq_num(), cond :: type_cond(), memo :: type_memo(), operations :: type_operations(), ext :: type_ext()) :: t()
  def new(
    %MuxedAccount{} = source_account,
    %Uint32{} = fee,
    %SequenceNumber{} = seq_num,
    %Preconditions{} = cond,
    %Memo{} = memo,
    %OperationList100{} = operations,
    %TransactionExt{} = ext
  ),
  do: %__MODULE__{source_account: source_account, fee: fee, seq_num: seq_num, cond: cond, memo: memo, operations: operations, ext: ext}

  @impl true
  def encode_xdr(%__MODULE__{source_account: source_account, fee: fee, seq_num: seq_num, cond: cond, memo: memo, operations: operations, ext: ext}) do
    [source_account: source_account, fee: fee, seq_num: seq_num, cond: cond, memo: memo, operations: operations, ext: ext]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{source_account: source_account, fee: fee, seq_num: seq_num, cond: cond, memo: memo, operations: operations, ext: ext}) do
    [source_account: source_account, fee: fee, seq_num: seq_num, cond: cond, memo: memo, operations: operations, ext: ext]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [source_account: source_account, fee: fee, seq_num: seq_num, cond: cond, memo: memo, operations: operations, ext: ext]}, rest}} ->
        {:ok, {new(source_account, fee, seq_num, cond, memo, operations, ext), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [source_account: source_account, fee: fee, seq_num: seq_num, cond: cond, memo: memo, operations: operations, ext: ext]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(source_account, fee, seq_num, cond, memo, operations, ext), rest}
  end
end
