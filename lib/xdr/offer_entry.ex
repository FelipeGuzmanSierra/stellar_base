defmodule StellarBase.XDR.OfferEntry do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `OfferEntry` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    AccountID,
    Int64,
    Asset,
    Price,
    Uint32,
    OfferEntryExt
  }

  @struct_spec XDR.Struct.new(
    seller_id: AccountID,
    offer_id: Int64,
    selling: Asset,
    buying: Asset,
    amount: Int64,
    price: Price,
    flags: Uint32,
    ext: OfferEntryExt
  )

  @type type_seller_id :: AccountID.t()
  @type type_offer_id :: Int64.t()
  @type type_selling :: Asset.t()
  @type type_buying :: Asset.t()
  @type type_amount :: Int64.t()
  @type type_price :: Price.t()
  @type type_flags :: Uint32.t()
  @type type_ext :: OfferEntryExt.t()

  @type t :: %__MODULE__{seller_id: type_seller_id(), offer_id: type_offer_id(), selling: type_selling(), buying: type_buying(), amount: type_amount(), price: type_price(), flags: type_flags(), ext: type_ext()}

  defstruct [:seller_id, :offer_id, :selling, :buying, :amount, :price, :flags, :ext]

  @spec new(seller_id :: type_seller_id(), offer_id :: type_offer_id(), selling :: type_selling(), buying :: type_buying(), amount :: type_amount(), price :: type_price(), flags :: type_flags(), ext :: type_ext()) :: t()
  def new(
    %AccountID{} = seller_id,
    %Int64{} = offer_id,
    %Asset{} = selling,
    %Asset{} = buying,
    %Int64{} = amount,
    %Price{} = price,
    %Uint32{} = flags,
    %OfferEntryExt{} = ext
  ),
  do: %__MODULE__{seller_id: seller_id, offer_id: offer_id, selling: selling, buying: buying, amount: amount, price: price, flags: flags, ext: ext}

  @impl true
  def encode_xdr(%__MODULE__{seller_id: seller_id, offer_id: offer_id, selling: selling, buying: buying, amount: amount, price: price, flags: flags, ext: ext}) do
    [seller_id: seller_id, offer_id: offer_id, selling: selling, buying: buying, amount: amount, price: price, flags: flags, ext: ext]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{seller_id: seller_id, offer_id: offer_id, selling: selling, buying: buying, amount: amount, price: price, flags: flags, ext: ext}) do
    [seller_id: seller_id, offer_id: offer_id, selling: selling, buying: buying, amount: amount, price: price, flags: flags, ext: ext]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [seller_id: seller_id, offer_id: offer_id, selling: selling, buying: buying, amount: amount, price: price, flags: flags, ext: ext]}, rest}} ->
        {:ok, {new(seller_id, offer_id, selling, buying, amount, price, flags, ext), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [seller_id: seller_id, offer_id: offer_id, selling: selling, buying: buying, amount: amount, price: price, flags: flags, ext: ext]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(seller_id, offer_id, selling, buying, amount, price, flags, ext), rest}
  end
end
