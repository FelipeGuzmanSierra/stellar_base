defmodule StellarBase.XDR.ClaimableBalanceEntry do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `ClaimableBalanceEntry` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    ClaimableBalanceID,
    ClaimantList10,
    Asset,
    Int64,
    ClaimableBalanceEntryExt
  }

  @struct_spec XDR.Struct.new(
    balance_id: ClaimableBalanceID,
    claimants: ClaimantList10,
    asset: Asset,
    amount: Int64,
    ext: ClaimableBalanceEntryExt
  )

  @type type_balance_id :: ClaimableBalanceID.t()
  @type type_claimants :: ClaimantList10.t()
  @type type_asset :: Asset.t()
  @type type_amount :: Int64.t()
  @type type_ext :: ClaimableBalanceEntryExt.t()

  @type t :: %__MODULE__{balance_id: type_balance_id(), claimants: type_claimants(), asset: type_asset(), amount: type_amount(), ext: type_ext()}

  defstruct [:balance_id, :claimants, :asset, :amount, :ext]

  @spec new(balance_id :: type_balance_id(), claimants :: type_claimants(), asset :: type_asset(), amount :: type_amount(), ext :: type_ext()) :: t()
  def new(
    %ClaimableBalanceID{} = balance_id,
    %ClaimantList10{} = claimants,
    %Asset{} = asset,
    %Int64{} = amount,
    %ClaimableBalanceEntryExt{} = ext
  ),
  do: %__MODULE__{balance_id: balance_id, claimants: claimants, asset: asset, amount: amount, ext: ext}

  @impl true
  def encode_xdr(%__MODULE__{balance_id: balance_id, claimants: claimants, asset: asset, amount: amount, ext: ext}) do
    [balance_id: balance_id, claimants: claimants, asset: asset, amount: amount, ext: ext]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{balance_id: balance_id, claimants: claimants, asset: asset, amount: amount, ext: ext}) do
    [balance_id: balance_id, claimants: claimants, asset: asset, amount: amount, ext: ext]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [balance_id: balance_id, claimants: claimants, asset: asset, amount: amount, ext: ext]}, rest}} ->
        {:ok, {new(balance_id, claimants, asset, amount, ext), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [balance_id: balance_id, claimants: claimants, asset: asset, amount: amount, ext: ext]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(balance_id, claimants, asset, amount, ext), rest}
  end
end
