defmodule StellarBase.XDR.CreateContractArgs do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `CreateContractArgs` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    ContractID,
    SCContractExecutable
  }

  @struct_spec XDR.Struct.new(
    contract_id: ContractID,
    source: SCContractExecutable
  )

  @type type_contract_id :: ContractID.t()
  @type type_source :: SCContractExecutable.t()

  @type t :: %__MODULE__{contract_id: type_contract_id(), source: type_source()}

  defstruct [:contract_id, :source]

  @spec new(contract_id :: type_contract_id(), source :: type_source()) :: t()
  def new(
    %ContractID{} = contract_id,
    %SCContractExecutable{} = source
  ),
  do: %__MODULE__{contract_id: contract_id, source: source}

  @impl true
  def encode_xdr(%__MODULE__{contract_id: contract_id, source: source}) do
    [contract_id: contract_id, source: source]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{contract_id: contract_id, source: source}) do
    [contract_id: contract_id, source: source]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [contract_id: contract_id, source: source]}, rest}} ->
        {:ok, {new(contract_id, source), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [contract_id: contract_id, source: source]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(contract_id, source), rest}
  end
end
