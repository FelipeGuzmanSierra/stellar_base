defmodule StellarBase.XDR.Error do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `Error` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    ErrorCode,
    String100
  }

  @struct_spec XDR.Struct.new(
    code: ErrorCode,
    msg: String100
  )

  @type type_code :: ErrorCode.t()
  @type type_msg :: String100.t()

  @type t :: %__MODULE__{code: type_code(), msg: type_msg()}

  defstruct [:code, :msg]

  @spec new(code :: type_code(), msg :: type_msg()) :: t()
  def new(
    %ErrorCode{} = code,
    %String100{} = msg
  ),
  do: %__MODULE__{code: code, msg: msg}

  @impl true
  def encode_xdr(%__MODULE__{code: code, msg: msg}) do
    [code: code, msg: msg]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{code: code, msg: msg}) do
    [code: code, msg: msg]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [code: code, msg: msg]}, rest}} ->
        {:ok, {new(code, msg), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [code: code, msg: msg]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(code, msg), rest}
  end
end
