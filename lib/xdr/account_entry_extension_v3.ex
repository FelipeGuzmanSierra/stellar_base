defmodule StellarBase.XDR.AccountEntryExtensionV3 do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `AccountEntryExtensionV3` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    ExtensionPoint,
    Uint32,
    TimePoint
  }

  @struct_spec XDR.Struct.new(
    ext: ExtensionPoint,
    seq_ledger: Uint32,
    seq_time: TimePoint
  )

  @type type_ext :: ExtensionPoint.t()
  @type type_seq_ledger :: Uint32.t()
  @type type_seq_time :: TimePoint.t()

  @type t :: %__MODULE__{ext: type_ext(), seq_ledger: type_seq_ledger(), seq_time: type_seq_time()}

  defstruct [:ext, :seq_ledger, :seq_time]

  @spec new(ext :: type_ext(), seq_ledger :: type_seq_ledger(), seq_time :: type_seq_time()) :: t()
  def new(
    %ExtensionPoint{} = ext,
    %Uint32{} = seq_ledger,
    %TimePoint{} = seq_time
  ),
  do: %__MODULE__{ext: ext, seq_ledger: seq_ledger, seq_time: seq_time}

  @impl true
  def encode_xdr(%__MODULE__{ext: ext, seq_ledger: seq_ledger, seq_time: seq_time}) do
    [ext: ext, seq_ledger: seq_ledger, seq_time: seq_time]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{ext: ext, seq_ledger: seq_ledger, seq_time: seq_time}) do
    [ext: ext, seq_ledger: seq_ledger, seq_time: seq_time]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [ext: ext, seq_ledger: seq_ledger, seq_time: seq_time]}, rest}} ->
        {:ok, {new(ext, seq_ledger, seq_time), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [ext: ext, seq_ledger: seq_ledger, seq_time: seq_time]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(ext, seq_ledger, seq_time), rest}
  end
end
