defmodule StellarBase.XDR.ConfigSettingEntry do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `ConfigSettingEntry` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    ConfigSettingEntryExt,
    ConfigSettingID,
    ConfigSetting
  }

  @struct_spec XDR.Struct.new(
    ext: ConfigSettingEntryExt,
    config_setting_id: ConfigSettingID,
    setting: ConfigSetting
  )

  @type type_ext :: ConfigSettingEntryExt.t()
  @type type_config_setting_id :: ConfigSettingID.t()
  @type type_setting :: ConfigSetting.t()

  @type t :: %__MODULE__{ext: type_ext(), config_setting_id: type_config_setting_id(), setting: type_setting()}

  defstruct [:ext, :config_setting_id, :setting]

  @spec new(ext :: type_ext(), config_setting_id :: type_config_setting_id(), setting :: type_setting()) :: t()
  def new(
    %ConfigSettingEntryExt{} = ext,
    %ConfigSettingID{} = config_setting_id,
    %ConfigSetting{} = setting
  ),
  do: %__MODULE__{ext: ext, config_setting_id: config_setting_id, setting: setting}

  @impl true
  def encode_xdr(%__MODULE__{ext: ext, config_setting_id: config_setting_id, setting: setting}) do
    [ext: ext, config_setting_id: config_setting_id, setting: setting]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{ext: ext, config_setting_id: config_setting_id, setting: setting}) do
    [ext: ext, config_setting_id: config_setting_id, setting: setting]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [ext: ext, config_setting_id: config_setting_id, setting: setting]}, rest}} ->
        {:ok, {new(ext, config_setting_id, setting), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [ext: ext, config_setting_id: config_setting_id, setting: setting]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(ext, config_setting_id, setting), rest}
  end
end
