defmodule StellarBase.XDR.ContractIDFromEd25519PublicKey do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `ContractIDFromEd25519PublicKey` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    Uint256,
    Signature
  }

  @struct_spec XDR.Struct.new(
    key: Uint256,
    signature: Signature,
    salt: Uint256
  )

  @type type_key :: Uint256.t()
  @type type_signature :: Signature.t()
  @type type_salt :: Uint256.t()

  @type t :: %__MODULE__{key: type_key(), signature: type_signature(), salt: type_salt()}

  defstruct [:key, :signature, :salt]

  @spec new(key :: type_key(), signature :: type_signature(), salt :: type_salt()) :: t()
  def new(
    %Uint256{} = key,
    %Signature{} = signature,
    %Uint256{} = salt
  ),
  do: %__MODULE__{key: key, signature: signature, salt: salt}

  @impl true
  def encode_xdr(%__MODULE__{key: key, signature: signature, salt: salt}) do
    [key: key, signature: signature, salt: salt]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{key: key, signature: signature, salt: salt}) do
    [key: key, signature: signature, salt: salt]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [key: key, signature: signature, salt: salt]}, rest}} ->
        {:ok, {new(key, signature, salt), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [key: key, signature: signature, salt: salt]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(key, signature, salt), rest}
  end
end
