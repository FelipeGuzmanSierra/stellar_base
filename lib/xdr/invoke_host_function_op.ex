defmodule StellarBase.XDR.InvokeHostFunctionOp do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `InvokeHostFunctionOp` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    HostFunction,
    LedgerFootprint,
    ContractAuthList
  }

  @struct_spec XDR.Struct.new(
                 function: HostFunction,
                 footprint: LedgerFootprint,
                 auth: ContractAuthList
               )

  @type function_type :: HostFunction.t()
  @type footprint_type :: LedgerFootprint.t()
  @type auth_type :: ContractAuthList.t()

  @type t :: %__MODULE__{
          function: function_type(),
          footprint: footprint_type(),
          auth: auth_type()
        }

  defstruct [:function, :footprint, :auth]

  @spec new(function :: function_type(), footprint :: footprint_type(), auth :: auth_type()) ::
          t()
  def new(
        %HostFunction{} = function,
        %LedgerFootprint{} = footprint,
        %ContractAuthList{} = auth
      ),
      do: %__MODULE__{function: function, footprint: footprint, auth: auth}

  @impl true
  def encode_xdr(%__MODULE__{function: function, footprint: footprint, auth: auth}) do
    [function: function, footprint: footprint, auth: auth]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{function: function, footprint: footprint, auth: auth}) do
    [function: function, footprint: footprint, auth: auth]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok,
       {%XDR.Struct{components: [function: function, footprint: footprint, auth: auth]}, rest}} ->
        {:ok, {new(function, footprint, auth), rest}}

      error ->
        error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [function: function, footprint: footprint, auth: auth]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)

    {new(function, footprint, auth), rest}
  end
end
