defmodule StellarBase.XDR.SCPStatementConfirm do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `SCPStatementConfirm` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    SCPBallot,
    Uint32,
    Hash
  }

  @struct_spec XDR.Struct.new(
    ballot: SCPBallot,
    n_prepared: Uint32,
    n_commit: Uint32,
    n_h: Uint32,
    quorum_set_hash: Hash
  )

  @type type_ballot :: SCPBallot.t()
  @type type_n_prepared :: Uint32.t()
  @type type_n_commit :: Uint32.t()
  @type type_n_h :: Uint32.t()
  @type type_quorum_set_hash :: Hash.t()

  @type t :: %__MODULE__{ballot: type_ballot(), n_prepared: type_n_prepared(), n_commit: type_n_commit(), n_h: type_n_h(), quorum_set_hash: type_quorum_set_hash()}

  defstruct [:ballot, :n_prepared, :n_commit, :n_h, :quorum_set_hash]

  @spec new(ballot :: type_ballot(), n_prepared :: type_n_prepared(), n_commit :: type_n_commit(), n_h :: type_n_h(), quorum_set_hash :: type_quorum_set_hash()) :: t()
  def new(
    %SCPBallot{} = ballot,
    %Uint32{} = n_prepared,
    %Uint32{} = n_commit,
    %Uint32{} = n_h,
    %Hash{} = quorum_set_hash
  ),
  do: %__MODULE__{ballot: ballot, n_prepared: n_prepared, n_commit: n_commit, n_h: n_h, quorum_set_hash: quorum_set_hash}

  @impl true
  def encode_xdr(%__MODULE__{ballot: ballot, n_prepared: n_prepared, n_commit: n_commit, n_h: n_h, quorum_set_hash: quorum_set_hash}) do
    [ballot: ballot, n_prepared: n_prepared, n_commit: n_commit, n_h: n_h, quorum_set_hash: quorum_set_hash]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{ballot: ballot, n_prepared: n_prepared, n_commit: n_commit, n_h: n_h, quorum_set_hash: quorum_set_hash}) do
    [ballot: ballot, n_prepared: n_prepared, n_commit: n_commit, n_h: n_h, quorum_set_hash: quorum_set_hash]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [ballot: ballot, n_prepared: n_prepared, n_commit: n_commit, n_h: n_h, quorum_set_hash: quorum_set_hash]}, rest}} ->
        {:ok, {new(ballot, n_prepared, n_commit, n_h, quorum_set_hash), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [ballot: ballot, n_prepared: n_prepared, n_commit: n_commit, n_h: n_h, quorum_set_hash: quorum_set_hash]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(ballot, n_prepared, n_commit, n_h, quorum_set_hash), rest}
  end
end
