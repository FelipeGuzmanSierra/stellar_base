defmodule StellarBase.XDR.AuthCert do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `AuthCert` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    Curve25519Public,
    Uint64,
    Signature
  }

  @struct_spec XDR.Struct.new(
    pubkey: Curve25519Public,
    expiration: Uint64,
    sig: Signature
  )

  @type type_pubkey :: Curve25519Public.t()
  @type type_expiration :: Uint64.t()
  @type type_sig :: Signature.t()

  @type t :: %__MODULE__{pubkey: type_pubkey(), expiration: type_expiration(), sig: type_sig()}

  defstruct [:pubkey, :expiration, :sig]

  @spec new(pubkey :: type_pubkey(), expiration :: type_expiration(), sig :: type_sig()) :: t()
  def new(
    %Curve25519Public{} = pubkey,
    %Uint64{} = expiration,
    %Signature{} = sig
  ),
  do: %__MODULE__{pubkey: pubkey, expiration: expiration, sig: sig}

  @impl true
  def encode_xdr(%__MODULE__{pubkey: pubkey, expiration: expiration, sig: sig}) do
    [pubkey: pubkey, expiration: expiration, sig: sig]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{pubkey: pubkey, expiration: expiration, sig: sig}) do
    [pubkey: pubkey, expiration: expiration, sig: sig]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [pubkey: pubkey, expiration: expiration, sig: sig]}, rest}} ->
        {:ok, {new(pubkey, expiration, sig), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [pubkey: pubkey, expiration: expiration, sig: sig]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(pubkey, expiration, sig), rest}
  end
end
