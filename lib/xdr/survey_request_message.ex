defmodule StellarBase.XDR.SurveyRequestMessage do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `SurveyRequestMessage` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    NodeID,
    Uint32,
    Curve25519Public,
    SurveyMessageCommandType
  }

  @struct_spec XDR.Struct.new(
    surveyor_peer_id: NodeID,
    surveyed_peer_id: NodeID,
    ledger_num: Uint32,
    encryption_key: Curve25519Public,
    command_type: SurveyMessageCommandType
  )

  @type type_surveyor_peer_id :: NodeID.t()
  @type type_surveyed_peer_id :: NodeID.t()
  @type type_ledger_num :: Uint32.t()
  @type type_encryption_key :: Curve25519Public.t()
  @type type_command_type :: SurveyMessageCommandType.t()

  @type t :: %__MODULE__{surveyor_peer_id: type_surveyor_peer_id(), surveyed_peer_id: type_surveyed_peer_id(), ledger_num: type_ledger_num(), encryption_key: type_encryption_key(), command_type: type_command_type()}

  defstruct [:surveyor_peer_id, :surveyed_peer_id, :ledger_num, :encryption_key, :command_type]

  @spec new(surveyor_peer_id :: type_surveyor_peer_id(), surveyed_peer_id :: type_surveyed_peer_id(), ledger_num :: type_ledger_num(), encryption_key :: type_encryption_key(), command_type :: type_command_type()) :: t()
  def new(
    %NodeID{} = surveyor_peer_id,
    %NodeID{} = surveyed_peer_id,
    %Uint32{} = ledger_num,
    %Curve25519Public{} = encryption_key,
    %SurveyMessageCommandType{} = command_type
  ),
  do: %__MODULE__{surveyor_peer_id: surveyor_peer_id, surveyed_peer_id: surveyed_peer_id, ledger_num: ledger_num, encryption_key: encryption_key, command_type: command_type}

  @impl true
  def encode_xdr(%__MODULE__{surveyor_peer_id: surveyor_peer_id, surveyed_peer_id: surveyed_peer_id, ledger_num: ledger_num, encryption_key: encryption_key, command_type: command_type}) do
    [surveyor_peer_id: surveyor_peer_id, surveyed_peer_id: surveyed_peer_id, ledger_num: ledger_num, encryption_key: encryption_key, command_type: command_type]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{surveyor_peer_id: surveyor_peer_id, surveyed_peer_id: surveyed_peer_id, ledger_num: ledger_num, encryption_key: encryption_key, command_type: command_type}) do
    [surveyor_peer_id: surveyor_peer_id, surveyed_peer_id: surveyed_peer_id, ledger_num: ledger_num, encryption_key: encryption_key, command_type: command_type]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [surveyor_peer_id: surveyor_peer_id, surveyed_peer_id: surveyed_peer_id, ledger_num: ledger_num, encryption_key: encryption_key, command_type: command_type]}, rest}} ->
        {:ok, {new(surveyor_peer_id, surveyed_peer_id, ledger_num, encryption_key, command_type), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [surveyor_peer_id: surveyor_peer_id, surveyed_peer_id: surveyed_peer_id, ledger_num: ledger_num, encryption_key: encryption_key, command_type: command_type]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(surveyor_peer_id, surveyed_peer_id, ledger_num, encryption_key, command_type), rest}
  end
end
