defmodule StellarBase.XDR.TransactionV0Envelope do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `TransactionV0Envelope` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    TransactionV0,
    DecoratedSignatureList20
  }

  @struct_spec XDR.Struct.new(
    tx: TransactionV0,
    signatures: DecoratedSignatureList20
  )

  @type type_tx :: TransactionV0.t()
  @type type_signatures :: DecoratedSignatureList20.t()

  @type t :: %__MODULE__{tx: type_tx(), signatures: type_signatures()}

  defstruct [:tx, :signatures]

  @spec new(tx :: type_tx(), signatures :: type_signatures()) :: t()
  def new(
    %TransactionV0{} = tx,
    %DecoratedSignatureList20{} = signatures
  ),
  do: %__MODULE__{tx: tx, signatures: signatures}

  @impl true
  def encode_xdr(%__MODULE__{tx: tx, signatures: signatures}) do
    [tx: tx, signatures: signatures]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{tx: tx, signatures: signatures}) do
    [tx: tx, signatures: signatures]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [tx: tx, signatures: signatures]}, rest}} ->
        {:ok, {new(tx, signatures), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [tx: tx, signatures: signatures]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(tx, signatures), rest}
  end
end
