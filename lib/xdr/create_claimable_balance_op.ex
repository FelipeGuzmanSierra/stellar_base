defmodule StellarBase.XDR.CreateClaimableBalanceOp do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `CreateClaimableBalanceOp` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    Asset,
    Int64,
    ClaimantList10
  }

  @struct_spec XDR.Struct.new(
    asset: Asset,
    amount: Int64,
    claimants: ClaimantList10
  )

  @type type_asset :: Asset.t()
  @type type_amount :: Int64.t()
  @type type_claimants :: ClaimantList10.t()

  @type t :: %__MODULE__{asset: type_asset(), amount: type_amount(), claimants: type_claimants()}

  defstruct [:asset, :amount, :claimants]

  @spec new(asset :: type_asset(), amount :: type_amount(), claimants :: type_claimants()) :: t()
  def new(
    %Asset{} = asset,
    %Int64{} = amount,
    %ClaimantList10{} = claimants
  ),
  do: %__MODULE__{asset: asset, amount: amount, claimants: claimants}

  @impl true
  def encode_xdr(%__MODULE__{asset: asset, amount: amount, claimants: claimants}) do
    [asset: asset, amount: amount, claimants: claimants]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{asset: asset, amount: amount, claimants: claimants}) do
    [asset: asset, amount: amount, claimants: claimants]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [asset: asset, amount: amount, claimants: claimants]}, rest}} ->
        {:ok, {new(asset, amount, claimants), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [asset: asset, amount: amount, claimants: claimants]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(asset, amount, claimants), rest}
  end
end
